name: Release

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always

permissions:
    contents: write
    packages: write

jobs:
    build:
        name: Build ${{ matrix.target }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: openrank
                      asset_name: openrank-linux-amd64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      artifact_name: openrank
                      asset_name: openrank-linux-arm64

                    - os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: openrank
                      asset_name: openrank-macos-amd64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      artifact_name: openrank
                      asset_name: openrank-macos-arm64

                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: openrank.exe
                      asset_name: openrank-windows-amd64.exe
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      artifact_name: openrank.exe
                      asset_name: openrank-windows-arm64.exe

        steps:
            - uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install cross-compilation tools (Linux ARM64)
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Setup vcpkg and OpenSSL for Windows
              if: matrix.os == 'windows-latest'
              run: |
                  # Determine vcpkg triplet based on target architecture
                  if ("${{ matrix.target }}" -eq "x86_64-pc-windows-msvc") {
                      $triplet = "x64-windows-static"
                  } else {
                      $triplet = "arm64-windows-static"
                  }

                  # Install OpenSSL using vcpkg
                  vcpkg install openssl:$triplet

                  # Set environment variables for OpenSSL
                  echo "OPENSSL_DIR=C:\vcpkg\installed\$triplet" >> $env:GITHUB_ENV
                  echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
                  echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
              shell: powershell

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Set up Windows OpenSSL environment
              if: matrix.os == 'windows-latest'
              run: |
                  echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
              shell: powershell

            - name: Build binary
              run: |
                  if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
                    export CC=aarch64-linux-gnu-gcc
                    export AR=aarch64-linux-gnu-ar
                    export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
                  fi
                  cargo build --release --target ${{ matrix.target }} -p openrank
              shell: bash
              env:
                  CHAIN_RPC_URL: ${{ secrets.CHAIN_RPC_URL }}
                  OPENRANK_MANAGER_ADDRESS: ${{ secrets.OPENRANK_MANAGER_ADDRESS }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Strip binary (Linux and macOS)
              if: matrix.os != 'windows-latest'
              run: |
                  if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
                    aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
                  else
                    strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
                  fi

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.asset_name }}
                  path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    release:
        name: Create Release
        needs: build
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')

        steps:
            - uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Rename artifacts and create checksums
              run: |
                  mkdir -p release-assets
                  # Rename each artifact to its proper asset name
                  find artifacts -name "openrank*" -type f | while read file; do
                    asset_dir=$(basename $(dirname "$file"))
                    cp "$file" "release-assets/$asset_dir"
                  done
                  # Create checksums
                  cd release-assets
                  sha256sum * > ../checksums.txt

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      release-assets/*
                      checksums.txt
                  body: |
                      ## OpenRank CLI Release

                      Pre-compiled binaries for various platforms.

                      ### Installation

                      #### Linux/macOS:
                      1. Download the appropriate binary for your platform
                      2. Make it executable: `chmod +x openrank-*`
                      3. Move to PATH: `sudo mv openrank-* /usr/local/bin/openrank`

                      #### Windows:
                      1. Download the appropriate `.exe` file for your platform
                      2. Add to PATH or run directly

                      ### Checksums

                      Verify your download with the provided checksums.txt file.
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
