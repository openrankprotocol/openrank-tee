#!/bin/bash

# Parse command line arguments
CONTEXT=""

# Check for --context flag or positional argument
if [[ "$1" == "--context" ]]; then
    CONTEXT="$2"
elif [[ -n "$1" ]]; then
    CONTEXT="$1"
fi

# Verify context was provided
if [[ -z "$CONTEXT" ]]; then
    echo "Error: No context provided. Usage: $0 <context> or $0 --context <context>" >&2
    exit 1
fi

# Handle devnet context
if [[ "$CONTEXT" == "devnet" ]]; then
    echo "═══════════════════════════════════════════════════════════════════"
    echo "  TEE AVS Attestation - Context: devnet"
    echo "═══════════════════════════════════════════════════════════════════"
    echo ""
    echo "Attestation is not available for local devnet instances."
    echo "TDX quotes are only generated in production TEE environments."
    echo "═══════════════════════════════════════════════════════════════════"
    exit 0
fi

# Path to context config file
CONFIG_FILE="config/contexts/${CONTEXT}.yaml"

# Check if config file exists
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "Error: Context configuration file not found: $CONFIG_FILE" >&2
    exit 1
fi

# Extract avs.address from config
AVS_ADDRESS=$(yq eval '.context.avs.address // ""' "$CONFIG_FILE" 2>/dev/null)

# Check if avs.address was found
if [[ -z "$AVS_ADDRESS" ]]; then
    echo "Error: avs.address not found in $CONFIG_FILE" >&2
    echo "" >&2
    echo "Deploy your AVS first: 'devkit avs deploy contracts l1 --context=$CONTEXT'" >&2
    exit 1
fi

# Read coordinator API from compute-tee context file
TEE_CONTEXT_FILE=".compute-tee/context/${CONTEXT}.yaml"
if [[ ! -f "$TEE_CONTEXT_FILE" ]]; then
    echo "Error: TEE context file not found: $TEE_CONTEXT_FILE" >&2
    exit 1
fi

# Extract coordinator API URL
COORDINATOR_API=$(yq eval '.apis.coordinator // ""' "$TEE_CONTEXT_FILE" 2>/dev/null)
if [[ -z "$COORDINATOR_API" ]]; then
    echo "Error: apis.coordinator not found in $TEE_CONTEXT_FILE" >&2
    exit 1
fi

# Call the API endpoint for specific AVS instance
API_URL="${COORDINATOR_API}/instances/avs/${AVS_ADDRESS}"
RESPONSE=$(curl -s "$API_URL")

# Check if curl was successful
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to fetch instance data from $API_URL" >&2
    exit 1
fi

# Check if we got an error response
if echo "$RESPONSE" | jq -e '.error' >/dev/null 2>&1; then
    echo "Error: No instance found with avs.address: $AVS_ADDRESS" >&2
    echo "" >&2
    echo "The instance may still be provisioning. Please wait a few minutes and try again." >&2
    exit 1
fi

# Extract public IP
PUBLIC_IP=$(echo "$RESPONSE" | jq -r '.public_ip')

# Check if public IP was found
if [[ -z "$PUBLIC_IP" ]] || [[ "$PUBLIC_IP" == "null" ]]; then
    echo "Error: No public IP found for instance" >&2
    exit 1
fi

# Fetch logs/quote from the instance
LOGS_URL="http://${PUBLIC_IP}:31634/logs"
LOGS_RESPONSE=$(curl -s "$LOGS_URL")

# Check if curl was successful
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to fetch attestation from $LOGS_URL" >&2
    echo "The instance may not be fully initialized yet." >&2
    exit 1
fi

# Extract quote
QUOTE=$(echo "$LOGS_RESPONSE" | jq -r '.quote // empty' 2>/dev/null)

if [[ -z "$QUOTE" ]]; then
    echo "Error: No attestation quote found in response." >&2
    exit 1
fi

# Extract the attested data from the response to show what's being attested
echo "═══════════════════════════════════════════════════════════════════"
echo "  TEE AVS Attestation - Context: $CONTEXT"
echo "═══════════════════════════════════════════════════════════════════"
echo ""
echo "Instance Information:"
echo "  Name:            $(echo "$RESPONSE" | jq -r '.name')"
echo "  Public IP:       $PUBLIC_IP"
echo "  AVS Address:     $AVS_ADDRESS"
echo ""
echo "TDX Quote:"
echo "═══════════════════════════════════════════════════════════════════"
echo "$QUOTE"
echo "═══════════════════════════════════════════════════════════════════"
echo ""
echo "This TDX quote cryptographically attests to:"
echo "  • EVM Address generated by the TEE"
echo "  • Solana Address generated by the TEE"
echo "  • AGE encryption public key for environment variables"
echo "  • Docker Compose application hash (compose_hash)"
echo ""
echo "The quote proves these values were generated inside a genuine"
echo "Intel TDX Trusted Execution Environment and have not been tampered with."
echo "═══════════════════════════════════════════════════════════════════"
