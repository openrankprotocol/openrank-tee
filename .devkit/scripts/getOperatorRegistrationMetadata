#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./getOperatorRegistrationMetadata '{\"version\":\"0.0.1\",\"context\":{...}}'"
    exit 1
fi

# Parse the JSON context
CONTEXT="$1"

# Check for required tools
ensureJq
ensureYq

# Extract environment from context
ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')

if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi

# Path to the YAML context file
CONTEXT_FILE="config/contexts/${ENVIRONMENT}.yaml"

# Check if context file exists
if [ ! -f "$CONTEXT_FILE" ]; then
    log "Error: Context file not found: $CONTEXT_FILE"
    exit 1
fi

# Extract all operator addresses from YAML
OPERATOR_ADDRESSES=$(yq eval '.context.operators[].address' "$CONTEXT_FILE")

# Check if any operators were found
if [ -z "$OPERATOR_ADDRESSES" ]; then
    log "Error: No operators found in $CONTEXT_FILE"
    exit 1
fi

# Build JSON array of operator registrations
REGISTRATIONS="[]"
while IFS= read -r address; do
    if [ -n "$address" ]; then
        # Create registration object for this operator
        REGISTRATION=$(jq -n \
            --arg addr "$address" \
            '{ address: $addr, operator_set_id: 0, payload: "" }')
        # Add to registrations array
        REGISTRATIONS=$(echo "$REGISTRATIONS" | jq \
            --argjson reg "$REGISTRATION" \
            '. + [$reg]')
    fi
done <<< "$OPERATOR_ADDRESSES"

# Create final result
RESULT=$(jq -n \
    --argjson registrations "$REGISTRATIONS" \
    '{ operator_registrations: $registrations }')

# Print the JSON to stdout
echo "$RESULT" | jq -c . 
