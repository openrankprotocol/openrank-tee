#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./run '{\"version\":\"0.0.1\",\"context\":{...}}'"
    exit 1
fi

# Parse the JSON context
CONTEXT="$1"

# Check for required tools
ensureJq
ensureDocker
ensureYq

ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')
if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi

log "Starting TEE Compose services for environment: $ENVIRONMENT"

# Docker Compose File Selection
# ----------------------------
# You can specify which docker-compose file to use by setting the COMPOSE_FILE environment variable:
#   export COMPOSE_FILE=docker-compose.yml
#   devkit avs run devnet
#
# If COMPOSE_FILE is not set, the script will fallback to docker-compose.local.yml

# Check if COMPOSE_FILE environment variable is set
if [ -n "$COMPOSE_FILE" ]; then
    # Validate the specified file exists
    if [ ! -f "$COMPOSE_FILE" ]; then
        log "Specified COMPOSE_FILE '$COMPOSE_FILE' does not exist!"
        exit 1
    fi
    log "Using compose file from environment variable: $COMPOSE_FILE"
else
    # Fallback to docker-compose.local.yml
    COMPOSE_FILE="docker-compose.local.yml"
    if [ ! -f "$COMPOSE_FILE" ]; then
        log "Default docker-compose.local.yml file not found!"
        exit 1
    fi
    log "Using default compose file: $COMPOSE_FILE"
fi

# Validate the selected file with yq
if ! yq eval '.' "$COMPOSE_FILE" > /dev/null 2>&1; then
    log "Invalid YAML in ${COMPOSE_FILE}"
    exit 1
fi

# Validate .env files exist
if [ ! -f ".env.public" ]; then
    log ".env.public not found!"
    exit 1
fi

if [ ! -f ".env.private" ]; then
    log ".env.private not found!"
    exit 1
fi

# Check if mnemonic exists, generate if not
MNEMONIC_FILE="mnemonic.txt"
if [ ! -f "$MNEMONIC_FILE" ]; then
    log "Mnemonic not found. Generating..."
    "$( dirname "${BASH_SOURCE[0]}" )/generate-mnemonic"
fi

# Load the mnemonic
if [ -f "$MNEMONIC_FILE" ]; then
    # Extract the mnemonic phrase (the only uncommented line)
    MNEMONIC=$(grep -v "^#" "$MNEMONIC_FILE")
    log "Mnemonic loaded from $MNEMONIC_FILE"
else
    log "Failed to load mnemonic!"
    exit 1
fi

# Start docker-compose services using both env files and passing MNEMONIC
log "Starting Docker Compose services..."
MNEMONIC="$MNEMONIC" docker compose -f "${COMPOSE_FILE}" --env-file .env.public --env-file .env.private -p tee-avs-${ENVIRONMENT} up -d

# Get list of started services
SERVICES=$(docker ps --filter "label=com.docker.compose.project=tee-avs-${ENVIRONMENT}" --format "{{.Names}}" | sed "s/^tee-avs-${ENVIRONMENT}-//" | tr '\n' ' ')

log "TEE Compose services started successfully."
log "Project: tee-avs-${ENVIRONMENT}"
log "Services: $SERVICES"
log ""
log "To view logs: docker compose -p tee-avs-${ENVIRONMENT} logs -f"
log "To stop: docker compose -p tee-avs-${ENVIRONMENT} down"
