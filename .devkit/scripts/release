#!/usr/bin/env bash
set -e

source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Parse command line arguments
VERSION=""
REGISTRY=""
IMAGE=""
ORIGINAL_IMAGE_ID=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --version)
      VERSION="$2"
      shift 2
      ;;
    --registry)
      REGISTRY="$2"
      shift 2
      ;;
    --image)
      IMAGE="$2"
      shift 2
      ;;
    --original-image-id)
      ORIGINAL_IMAGE_ID="$2"
      shift 2
      ;;
    *)
      echo "Unknown option $1" >&2
      exit 1
      ;;
  esac
done

# Ensure required arguments are provided
if [ -z "$VERSION" ]; then
  echo "Error: --version is required" >&2
  exit 1
fi

# Check for required tools
ensureOras

# Find the most recent artifact in the build directory
BUILD_DIR="build/oci-artifacts"
if [ ! -d "$BUILD_DIR" ]; then
  echo "Error: Build directory $BUILD_DIR not found. Run build script first." >&2
  exit 1
fi

# Get the latest artifact tag from the build directory
# Parse the index.json to find the latest manifest by creation time
LATEST_TAG=$(jq -r '.manifests | sort_by(.annotations."org.opencontainers.image.created") | reverse | .[0].annotations."org.opencontainers.image.ref.name"' "$BUILD_DIR/index.json" 2>/dev/null)
if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
  echo "Error: No artifacts found in $BUILD_DIR. Run build script first." >&2
  exit 1
fi

log "Found latest build artifact: $LATEST_TAG"

# Construct destination reference
if [ -n "$REGISTRY" ]; then
  DEST_REF="${REGISTRY}:${VERSION}"
else
  if [ -z "$IMAGE" ]; then
    echo "Error: --image is required" >&2
    exit 1
  fi
  DEST_REF="${IMAGE}:${VERSION}"
fi

log "Deploying artifact to: $DEST_REF"

# Copy the artifact from OCI layout to the target registry
oras copy --from-oci-layout "${BUILD_DIR}:${LATEST_TAG}" "$DEST_REF" >&2

# Get the manifest digest of the deployed artifact
ARTIFACT_DIGEST=$(oras manifest fetch "$DEST_REF" --descriptor 2>/dev/null | jq -r '.digest')

# Create operator set mapping JSON output expected by Devkit
# Format: {"0": [{"digest": "sha256:...", "registry": "registry"}]}
RESULT=$(jq -n \
  --arg digest "$ARTIFACT_DIGEST" \
  --arg registry "$REGISTRY" \
  '{
    "0": [
      {
        digest: $digest,
        registry: $registry
      }
    ]
  }')

echo "$RESULT"
